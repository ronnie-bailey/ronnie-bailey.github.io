Sub SeparateDataByState()
Dim wsSource As Worksheet
Dim lastRow As Long, lastCol As Long
Dim i As Long, j As Long
Dim cellValue As String
Dim stateName As String
Dim dict As Object
Dim newWS As Worksheet
Dim headerRange As Range
Dim statesList As Variant
Dim foundState As String
Dim currentRow As Range

```
' List of all 50 states - ordered by length (longest first) to handle similar names correctly
statesList = Array("North Carolina", "South Carolina", "North Dakota", "South Dakota", "West Virginia", _
                  "New Hampshire", "New Jersey", "New Mexico", "New York", "Rhode Island", _
                  "Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", _
                  "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", _
                  "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", _
                  "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", _
                  "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Tennessee", "Texas", "Utah", _
                  "Vermont", "Virginia", "Washington", "Wisconsin", "Wyoming")

' Set source worksheet
Set wsSource = ActiveSheet
lastRow = wsSource.Cells(wsSource.Rows.Count, 1).End(xlUp).Row
lastCol = wsSource.Cells(1, wsSource.Columns.Count).End(xlToLeft).Column

' Create dictionary to track which states we've found
Set dict = CreateObject("Scripting.Dictionary")

' Get header row
Set headerRange = wsSource.Rows(1)

Application.ScreenUpdating = False
Application.DisplayAlerts = False

' Loop through each data row (starting from row 2 to skip headers)
For i = 2 To lastRow
    foundState = ""
    Set currentRow = wsSource.Rows(i)
    
    ' Check each state in our list (longest names first to avoid partial matches)
    For Each stateName In statesList
        ' Scan entire row for this state name
        For j = 1 To lastCol
            cellValue = UCase(Trim(wsSource.Cells(i, j).Value))
            If InStr(cellValue, UCase(stateName)) > 0 Then
                foundState = stateName
                Exit For
            End If
        Next j
        
        ' If we found a state, stop looking
        If foundState <> "" Then Exit For
    Next stateName
    
    ' If we found a state for this row
    If foundState <> "" Then
        ' Create worksheet for this state if it doesn't exist
        If Not dict.Exists(foundState) Then
            Set newWS = Worksheets.Add
            newWS.Name = Replace(foundState, " ", "_") ' Replace spaces for valid sheet names
            
            ' Copy headers to new sheet
            headerRange.Copy
            newWS.Rows(1).PasteSpecial xlPasteAll
            
            dict.Add foundState, newWS.Name
        Else
            ' Get existing worksheet
            Set newWS = Worksheets(dict(foundState))
        End If
        
        ' Copy current row to appropriate state sheet
        Dim nextRow As Long
        nextRow = newWS.Cells(newWS.Rows.Count, 1).End(xlUp).Row + 1
        currentRow.Copy
        newWS.Rows(nextRow).PasteSpecial xlPasteAll
    End If
    
    ' Progress indicator
    If i Mod 100 = 0 Then
        Application.StatusBar = "Processing row " & i & " of " & lastRow
    End If
Next i

' Clean up
Application.CutCopyMode = False
Application.ScreenUpdating = True
Application.DisplayAlerts = True
Application.StatusBar = False

' Create summary sheet
Set newWS = Worksheets.Add
newWS.Name = "State_Summary"
newWS.Cells(1, 1).Value = "State"
newWS.Cells(1, 2).Value = "Number of Records"

Dim summaryRow As Long
summaryRow = 2

For Each stateName In dict.Keys
    newWS.Cells(summaryRow, 1).Value = stateName
    Set newWS = Worksheets(dict(stateName))
    newWS.Cells(summaryRow, 2).Value = newWS.Cells(newWS.Rows.Count, 1).End(xlUp).Row - 1 ' Subtract header row
    summaryRow = summaryRow + 1
Next stateName

MsgBox "Data separation complete! Created " & dict.Count & " state sheets. Check the 'State_Summary' sheet for details."
```

End Sub

’ Helper function to clean up sheet names and handle duplicates
Function CreateSafeSheetName(stateName As String) As String
Dim safeName As String
safeName = Replace(stateName, “ “, “_”)
safeName = Left(safeName, 31) ’ Excel sheet name limit

```
' Check if sheet already exists and add number if needed
Dim counter As Integer
Dim testName As String
counter = 1
testName = safeName

Do While SheetExists(testName)
    testName = Left(safeName, 28) & "_" & counter
    counter = counter + 1
Loop

CreateSafeSheetName = testName
```

End Function

Function SheetExists(sheetName As String) As Boolean
Dim ws As Worksheet
On Error Resume Next
Set ws = Worksheets(sheetName)
SheetExists = Not ws Is Nothing
On Error GoTo 0
End Function
